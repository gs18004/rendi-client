/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/debug/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Debug Token */
        get: operations["debug_token_debug_token_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 구글 OAuth 인증 시작 */
        get: operations["login_google_auth_google_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 구글 OAuth 콜백 */
        get: operations["callback_auth_google_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그아웃 */
        post: operations["logout_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 토큰 재발급 */
        post: operations["refresh_token_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 프로필 조회
         * @description - 로그인된 유저의 프로필을 조회합니다.
         *     - 프로필이 없으면 `profile` 필드는 null 로 내려갑니다.
         */
        get: operations["read_profile_users_me_profile_get"];
        put?: never;
        /**
         * 내 프로필 저장/업데이트
         * @description - 이름/나이/성별 등 기본 정보 + 직업/거주지역/MBTI/흡연여부를 한 번에 저장합니다.
         *     - region, mbti는 선택, smoking은 필수입니다.
         *     - 성공 시 전체 유저+프로필을 반환합니다.
         */
        post: operations["upsert_profile_users_me_profile_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/survey/lifestyle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Lifestyle with answers */
        get: operations["get_lifestyle_survey_lifestyle_get"];
        put?: never;
        /** Post Lifestyle */
        post: operations["post_lifestyle_survey_lifestyle_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/survey/identify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Identify with answers */
        get: operations["get_identify_survey_identify_get"];
        put?: never;
        /** Post Identify */
        post: operations["post_identify_survey_identify_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/survey/preference": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Preference with answers */
        get: operations["get_preference_survey_preference_get"];
        put?: never;
        /** Post Preference */
        post: operations["post_preference_survey_preference_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/survey/beliefs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Beliefs with answers */
        get: operations["get_beliefs_survey_beliefs_get"];
        put?: never;
        /** Post Beliefs */
        post: operations["post_beliefs_survey_beliefs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/survey/essay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Essay */
        post: operations["post_essay_survey_essay_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partners/questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Questions */
        get: operations["get_questions_partners_questions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내가 등록한 모든 파트너 조회 */
        get: operations["list_partners_partners_get"];
        put?: never;
        /** Post Partner */
        post: operations["post_partner_partners_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partners/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 마지막 등록된 파트너 조회 */
        get: operations["get_latest_partners_latest_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partners/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 마지막 파트너에 대한 소팅(날짜/시간/장소) 저장
         * @description - 사용자가 마지막으로 등록한 파트너의
         *       date/time/place를 업데이트합니다.
         *     - 파트너를 하나도 등록하지 않았으면 404 반환.
         */
        post: operations["schedule_partner_partners_schedule_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Dashboard */
        get: operations["get_dashboard_dashboard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checklist/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 체크리스트 항목 전체 조회 */
        get: operations["list_items_checklist_items_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/checklist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 특정 날짜(기본: 오늘)의 체크리스트 상태 조회 */
        get: operations["get_today_checklist_checklist_get"];
        put?: never;
        /** 체크/해제 토글 */
        post: operations["toggle_check_checklist_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ActionOut */
        ActionOut: {
            /** Id */
            id: string;
            /** Title */
            title: string;
        };
        /** ChecklistItemOut */
        ChecklistItemOut: {
            /** Id */
            id: number;
            /** Text */
            text: string;
        };
        /** ChoiceAnswerIn */
        ChoiceAnswerIn: {
            /** Question Id */
            question_id: number;
            /** Option Id */
            option_id: string | null;
            /** Option Ids */
            option_ids: string[] | null;
        };
        /** ChoiceAnswerList */
        ChoiceAnswerList: {
            /** Answers */
            answers: components["schemas"]["ChoiceAnswerIn"][];
        };
        /** DailyChecklistOut */
        DailyChecklistOut: {
            /**
             * Date
             * Format: date
             */
            date: string;
            /** Items */
            items: components["schemas"]["UserChecklistStatus"][];
        };
        /** DashboardOut */
        DashboardOut: {
            partner: components["schemas"]["PartnerOut"];
            /** Countdown */
            countdown: string;
            /** Tasks */
            tasks: components["schemas"]["TaskOut"][];
            /** Actions */
            actions: components["schemas"]["ActionOut"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** NewPartnerIn */
        NewPartnerIn: {
            /**
             * Meeting Date
             * Format: date
             */
            meeting_date: string;
            /** Answers */
            answers: components["schemas"]["ChoiceAnswerIn"][];
        };
        /** OptionOut */
        OptionOut: {
            /** Label */
            label: string;
            /** Value */
            value: string;
        };
        /** PartnerAnswerOut */
        PartnerAnswerOut: {
            /** Question Id */
            question_id: number;
            /** Option Id */
            option_id: string;
        };
        /** PartnerListOut */
        PartnerListOut: {
            /** Partners */
            partners: components["schemas"]["PartnerWithAnswersOut"][];
        };
        /** PartnerOut */
        PartnerOut: {
            /** Id */
            id: number;
            /**
             * Meeting Date
             * Format: date
             */
            meeting_date: string;
            /** Meeting Time */
            meeting_time: string | null;
            /** Meeting Place */
            meeting_place: string | null;
        };
        /** PartnerWithAnswersOut */
        PartnerWithAnswersOut: {
            /** Id */
            id: number;
            /**
             * Meeting Date
             * Format: date
             */
            meeting_date: string;
            /** Meeting Time */
            meeting_time: string | null;
            /** Meeting Place */
            meeting_place: string | null;
            /** Answers */
            answers: components["schemas"]["PartnerAnswerOut"][];
        };
        /**
         * ProfileIn
         * @example {
         *       "age": 28,
         *       "gender": "male",
         *       "job": "Developer",
         *       "mbti": "INTJ",
         *       "name": "홍길동",
         *       "region": "Seoul",
         *       "smoking": true
         *     }
         */
        ProfileIn: {
            /** Name */
            name: string;
            /** Age */
            age: number;
            /** Gender */
            gender: string;
            /**
             * Job
             * @description 직업
             */
            job?: string | null;
            /**
             * Region
             * @description 거주 지역 (선택)
             */
            region?: string | null;
            /**
             * Mbti
             * @description MBTI (선택)
             */
            mbti?: string | null;
            /**
             * Smoking
             * @description 흡연 여부 (필수)
             */
            smoking: boolean;
        };
        /** ProfileInitialOut */
        ProfileInitialOut: {
            /** Name */
            name: string;
            /** Age */
            age: number;
            /** Gender */
            gender: string;
            /** Job */
            job: string | null;
            /** Region */
            region: string | null;
            /** Mbti */
            mbti: string | null;
            /** Smoking */
            smoking: boolean;
        };
        /** QuestionList */
        QuestionList: components["schemas"]["QuestionOut"][];
        /** QuestionOut */
        QuestionOut: {
            /** Id */
            id: number;
            /** Type */
            type: string;
            /** Title */
            title: string;
            /** Maxchoice */
            maxChoice: number | null;
            /** Options */
            options: components["schemas"]["OptionOut"][] | null;
            /** Subquestions */
            subQuestions: components["schemas"]["OptionOut"][] | null;
            /** Minlabel */
            minLabel: string | null;
            /** Maxlabel */
            maxLabel: string | null;
            /** Min */
            min: number | null;
            /** Max */
            max: number | null;
            /** Step */
            step: number | null;
        };
        /** QuestionWithAnswerOut */
        QuestionWithAnswerOut: {
            /** Id */
            id: number;
            /** Type */
            type: string;
            /** Title */
            title: string;
            /** Maxchoice */
            maxChoice: number | null;
            /** Options */
            options: components["schemas"]["OptionOut"][] | null;
            /** Subquestions */
            subQuestions: components["schemas"]["OptionOut"][] | null;
            /** Minlabel */
            minLabel: string | null;
            /** Maxlabel */
            maxLabel: string | null;
            /** Min */
            min: number | null;
            /** Max */
            max: number | null;
            /** Step */
            step: number | null;
            /** Answer Id */
            answer_id?: string | null;
            /** Answer Ids */
            answer_ids?: string[] | null;
            /** Text */
            text?: string | null;
        };
        /** SaveResult */
        SaveResult: {
            /** Status */
            status: string;
            /** Saved Count */
            saved_count: number;
        };
        /** ScheduleIn */
        ScheduleIn: {
            /**
             * Meeting Date
             * Format: date
             */
            meeting_date: string;
            /**
             * Meeting Time
             * Format: time
             */
            meeting_time: string;
            /** Meeting Place */
            meeting_place: string;
        };
        /** TaskOut */
        TaskOut: {
            /** Id */
            id: string;
            /** When */
            when: string;
            /** Title */
            title: string;
        };
        /** TextAnswerIn */
        TextAnswerIn: {
            /** Question Id */
            question_id: number;
            /** Text */
            text: string;
        };
        /** ToggleChecklistIn */
        ToggleChecklistIn: {
            /** Item Id */
            item_id: number;
            /** Checked */
            checked: boolean;
        };
        /**
         * TokenOut
         * @example {
         *       "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
         *       "refresh_token": "dGhpc19pc19hX3JlZnJlc2hfdG9rZW4..."
         *     }
         */
        TokenOut: {
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
        };
        /** UserChecklistStatus */
        UserChecklistStatus: {
            /** Item Id */
            item_id: number;
            /** Checked */
            checked: boolean;
        };
        /** UserProfileOut */
        UserProfileOut: {
            /** Id */
            id: number;
            /** Email */
            email: string;
            /** Name */
            name: string;
            /** Picture */
            picture: string | null;
            profile: components["schemas"]["ProfileInitialOut"] | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    debug_token_debug_token_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_google_auth_google_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            307: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    callback_auth_google_callback_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            307: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refresh_token_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                refresh_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_profile_users_me_profile_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upsert_profile_users_me_profile_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_lifestyle_survey_lifestyle_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionWithAnswerOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_lifestyle_survey_lifestyle_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChoiceAnswerList"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaveResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_identify_survey_identify_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionWithAnswerOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_identify_survey_identify_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChoiceAnswerList"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaveResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_preference_survey_preference_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionWithAnswerOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_preference_survey_preference_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChoiceAnswerList"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaveResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_beliefs_survey_beliefs_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionWithAnswerOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_beliefs_survey_beliefs_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChoiceAnswerList"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaveResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_essay_survey_essay_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TextAnswerIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaveResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_questions_partners_questions_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionList"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_partners_partners_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerListOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_partner_partners_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewPartnerIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_latest_partners_latest_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerWithAnswersOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    schedule_partner_partners_schedule_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartnerOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_dashboard_dashboard_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_items_checklist_items_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChecklistItemOut"][];
                };
            };
        };
    };
    get_today_checklist_checklist_get: {
        parameters: {
            query?: {
                for_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyChecklistOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    toggle_check_checklist_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                access_token?: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToggleChecklistIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
